{"version":3,"sources":["components/profile/profile.module.css","components/transactionHistory/transactionHistory.module.css","components/friendsLIst/friendsList.module.css","components/statistic/statistical.module.css","components/transactionHistory/TransactionHistory.jsx","components/friendsLIst/FriendsList.jsx","components/profile/ProfileCard.jsx","components/statistic/randomColor.js","components/statistic/Statistical.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","TransactionHistory","data","className","styles","transactionHistory","transactionTitle","transactionItem","map","id","type","amount","currency","transactionContent","defaultProps","ProppTypes","arrayOf","shape","number","string","bool","FriendsList","FriendsListWrapper","name","avatar","isOnline","item","statusRed","statusBlue","src","alt","ProfileCard","profile","description","tag","location","stats","label","quantity","followers","views","likes","randomColor","randomValue","Math","round","random","toString","Statistical","statistics","title","statList","percentage","style","background","App","friendsList","statistical","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b4ddbe7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"profile_profile__gg04M\",\"description\":\"profile_description__14X4n\",\"location\":\"profile_location__3M3w_\",\"stats\":\"profile_stats__1u5cr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"transactionHistory\":\"transactionHistory_transactionHistory__1pgHT\",\"transactionItem\":\"transactionHistory_transactionItem__32luO\",\"transactionTitle\":\"transactionHistory_transactionTitle__piozQ\",\"transactionContent\":\"transactionHistory_transactionContent__2_AVB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FriendsListWrapper\":\"friendsList_FriendsListWrapper__1dFtD\",\"statusRed\":\"friendsList_statusRed__6vx4g\",\"statusBlue\":\"friendsList_statusBlue__GMLw_\",\"item\":\"friendsList_item__3HN2r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics\":\"statistical_statistics__3AMlP\",\"title\":\"statistical_title__2XRq-\",\"statList\":\"statistical_statList__oOtlN\"};","import ProppTypes from 'prop-types';\r\nimport styles from \"./transactionHistory.module.css\";\r\n\r\nconst TransactionHistory = ({data}) => {\r\n   return <div>\r\n                <table className={styles.transactionHistory}>\r\n                    <thead >\r\n                        <tr className={styles.transactionTitle}>\r\n                            <th className={styles.transactionItem}>Type</th>\r\n                            <th className={styles.transactionItem}>Amount</th>\r\n                            <th className={styles.transactionItem}>Currency</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {data.map(({id, type, amount, currency}) => {\r\n                            return <tr key={id} className={styles.transactionContent} >\r\n                                        <td className={styles.transactionItem}>{type}</td>\r\n                                        <td className={styles.transactionItem}>{amount}</td>\r\n                                        <td className={styles.transactionItem}>{currency}</td>\r\n                                   </tr>\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n          </div>\r\n};\r\n\r\nTransactionHistory.defaultProps = {\r\n    data:[\r\n        {\r\n            id:\"-\",\r\n            type: \"undefined\",\r\n            amount: \"-\",\r\n            currency: \"undefined\"\r\n        }\r\n    ]\r\n  };\r\n\r\nTransactionHistory.ProppTypes = {\r\n    data: ProppTypes.arrayOf(\r\n        ProppTypes.shape({\r\n            id: ProppTypes.number,\r\n            type: ProppTypes.string,\r\n            amount: ProppTypes.string,\r\n            currency: ProppTypes.bool\r\n        })\r\n    )\r\n};\r\n\r\nexport default TransactionHistory;","import styles from './friendsList.module.css'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FriendsList = ({data}) => {\r\n   return <div className={styles.FriendsListWrapper}>\r\n       {data.map(({id, name, avatar, isOnline}) => {\r\n                    return  <li key={id} className={styles.item} >\r\n                                {isOnline?<span className={styles.statusRed}></span>:<span className={styles.statusBlue}></span>}\r\n                                <img className={styles.avatar} src={avatar} alt=\"\" />\r\n                                <p className={styles.name}>{name}</p>\r\n                                <span></span>\r\n                            </li>\r\n                })}\r\n          </div>\r\n};\r\n\r\nFriendsList.defaultProps = {\r\n    data:[\r\n        {\r\n            id:\"-\",\r\n            name: \"user\",\r\n            avatar:'https://yt3.ggpht.com/ytc/AAUvwniQnSWCntU5FpkgEeMsqpKqRq9d1nGZ-GwKM6iaOA=s900-c-k-c0x00ffffff-no-rj',\r\n            isOnline: \"-\"\r\n        }\r\n    ]\r\n  };\r\n\r\nFriendsList.propTypes = {\r\n    data: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number,\r\n            name: PropTypes.string,\r\n            avatar: PropTypes.string,\r\n            isOnline: PropTypes.bool\r\n        })\r\n    )\r\n};\r\n\r\nexport default FriendsList;\r\n","import PropTypes from 'prop-types';\r\nimport styles from './profile.module.css'\r\n\r\nconst ProfileCard = ({data}) => {\r\n    return (\r\n        <div>\r\n            <div className={styles.profile}>\r\n                <div className={styles.description}>\r\n                    <img \r\n                    src={data.avatar}\r\n                    alt=\"Аватар пользователя\"\r\n                    className=\"avatar\"\r\n                    />\r\n                    <p className={styles.name}>{data.name}</p>\r\n                    <p className={styles.tag}>{data.tag}</p>\r\n                    <p className={styles.location}>{data.location}</p>\r\n                </div>\r\n\r\n                <ul className={styles.stats}>\r\n                    <li>\r\n                        <span className={styles.label}>Followers</span>\r\n                        <span className={styles.quantity}>{data.stats.followers}</span>\r\n                    </li>\r\n                    <li>\r\n                        <span className={styles.label}>Views</span>\r\n                        <span className={styles.quantity}>{data.stats.views}</span>\r\n                    </li>\r\n                    <li>\r\n                        <span className={styles.label}>Likes</span>\r\n                        <span className={styles.quantity}>{data.stats.likes}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nProfileCard.defaultProps = {\r\n    data:{\r\n            name: \"user\",\r\n            tag: \"-\",\r\n            location: \"none\",\r\n            avatar: 'https://yt3.ggpht.com/ytc/AAUvwniQnSWCntU5FpkgEeMsqpKqRq9d1nGZ-GwKM6iaOA=s900-c-k-c0x00ffffff-no-rj',\r\n            stats: {\r\n                followers: \"-\",\r\n                views: \"-\",\r\n                likes: \"-\",\r\n            }\r\n        }\r\n    };\r\nProfileCard.propTypes = {\r\n    data: PropTypes.shape({\r\n        name: PropTypes.string,\r\n        tag: PropTypes.string,\r\n        location: PropTypes.string,\r\n        avatar: PropTypes.string,\r\n        stats: PropTypes.shape({\r\n            followers: PropTypes.number,\r\n            views: PropTypes.number,\r\n            likes: PropTypes.number,\r\n        }),\r\n    })\r\n};\r\n\r\nexport default ProfileCard;","let randomColor = function () {\r\n  function randomValue() {\r\n    return Math.round(Math.random() * 255).toString();\r\n  }\r\n  return (\r\n    'rgb' +\r\n    '(' +\r\n    randomValue() +\r\n    ',' +\r\n    ' ' +\r\n    randomValue() +\r\n    ',' +\r\n    ' ' +\r\n    randomValue() +\r\n    ')'\r\n  );\r\n};\r\n\r\nexport default randomColor;\r\n","import PropTypes from 'prop-types';\r\nimport styles from './statistical.module.css';\r\nimport randomColor from './randomColor';\r\n\r\nconst Statistical = ({data}) => {\r\n    return (\r\n        <section className={styles.statistics}>\r\n            <h2 className={styles.title}>Upload stats</h2>\r\n            <ul className={styles.statList}>\r\n                {data.map(({id, label, percentage}) => {\r\n                        return  <li key={id} className={styles.item}  style={{background: `${randomColor()}`}}>\r\n                                    <span className={styles.label}>{label}</span>\r\n                                    <span className={styles.percentage}>{percentage} </span>\r\n                                </li>\r\n                })}\r\n            </ul>\r\n        </section>\r\n    );\r\n};\r\nStatistical.defaultProps = {\r\n    data:[\r\n        {\r\n            id:\"-\",\r\n            label: \"doc_format\",\r\n            percentage: \"-\"\r\n        }\r\n    ]\r\n  };\r\nStatistical.propTypes = {\r\n    data: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string,\r\n            label: PropTypes.string,\r\n            percentage: PropTypes.number\r\n        })\r\n    )\r\n};\r\n\r\nexport default Statistical;","import './App.css';\nimport TransactionHistory from './components/transactionHistory/TransactionHistory';\nimport transactionHistory from './components/transactionHistory/transacyionHistory.json';\nimport FriendsList from './components/friendsLIst/FriendsList';\nimport friendsList from './components/friendsLIst/friendList.json';\nimport profile from './components/profile/profile.json';\nimport ProfileCard from './components/profile/ProfileCard';\nimport Statistical from './components/statistic/Statistical';\nimport statistical from './components/statistic/statistic.json';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ProfileCard data={profile} />\n      <FriendsList data={friendsList} />\n      <Statistical data={statistical} />\n      <TransactionHistory data={transactionHistory} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}